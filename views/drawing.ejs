<div id="drawing-area">
<canvas width="640" height="480" id="can"></canvas>
</div>

<div id="palette-area">

<div id="color-black" class="palette" onClick="changeColor('black')"></div>
<div id="color-red" class="palette" onClick="changeColor('red')"></div>
<div id="color-green" class="palette" onClick="changeColor('green')"></div>
<div id="color-blue" class="palette" onClick="changeColor('blue')"></div>
<div id="color-yellow" class="palette" onClick="changeColor('yellow')"></div>
<div id="color-orange" class="palette" onClick="changeColor('orange')"></div>
<div id="color-purple" class="palette" onClick="changeColor('purple')"></div>
<div id="color-white" class="palette" onClick="changeColor('white')"></div>
<div class="palette-button"><button id="clear-button" class="color-button" type="button">Clear canvas</button></div>
</div>

<script type="text/javascript" src="/socket.io/socket.io.js"></script>
<script type="text/javascript">
	
	const LINE_WIDTH = 10;
	
	//var socket = io.connect();
	try {
		// running on openshift
		process.env.OPENSHIFT_APP_NAME;
		var socket = io.connect('ws://' + window.location.search + ':80');
	} catch(e) {
		// running on other server(local)
		var socket = io.connect();
	}
	var can, ctx, cb;
	var mouse_condition = false;
	var data = new Array();

	var strokeColor = 'black';
	var prevX, prevY;
	
	function clearCanvas(ctx, can) {
		ctx.fillStyle = "rgb(255,255,255)";
		ctx.fillRect(0, 0, can.width, can.height);
		console.log("clear canvas");
	}

	function changeColor(color) {
		strokeColor = color;
		console.log(color);
	}
	
	function drawPos(ctx, d) {
		var pos = d['pos'];
		var i;
	
		ctx.beginPath();
		ctx.strokeStyle = d['color'];
		ctx.lineWidth = LINE_WIDTH;
		ctx.lineCap = 'round';
		ctx.lineJoin = 'round';
		ctx.moveTo(pos[0][0], pos[0][1]);
				
		for(i=0; i<pos.length; i++ ) {
			ctx.lineTo(pos[i][0], pos[i][1]);
		}

		ctx.stroke();
	}
	
	

	window.addEventListener( 'load', function() {
		can = document.getElementById('can');
		ctx = can.getContext('2d');
		
		cb = document.getElementById('clear-button');

		// NowLoading
		ctx.font = "32px Arial";
		ctx.fillText("Now Loading...", 230, 230);

		cb.addEventListener('click', function(e) {
			clearCanvas(ctx, can);
			socket.emit('message', JSON.stringify({type: 'clear'}));
			console.log( ">>> send clear command" );
			data.length = 0;
		});
		
		can.addEventListener( 'mousemove', function(e) {
			if( mouse_condition) {
				var rect = e.target.getBoundingClientRect();
				var mex = e.clientX - rect.left;
				var mey = e.clientY - rect.top;
				
				ctx.beginPath();
				ctx.strokeStyle = strokeColor;
				ctx.lineWidth = LINE_WIDTH;
				ctx.lineCap = 'round';
				ctx.moveTo(prevX, prevY);
				ctx.lineTo(mex, mey);
				ctx.stroke();
				data.push( [mex, mey] );

				prevX = mex;
				prevY = mey;
			}
		});

		can.addEventListener( 'mousedown', function(e) {
			mouse_condition = true;
			data.length = 0;
			
			var rect = e.target.getBoundingClientRect();
			var mex = e.clientX - rect.left;
			var mey = e.clientY - rect.top;
			data.push( [mex, mey] );
			prevX = mex;
			prevY = mey;
		});

		can.addEventListener( 'mouseup', function(e) {
			mouse_condition = false;
			var sendData = {type: 'draw',color: strokeColor, pos: data};
			var msg = JSON.stringify(sendData);
			console.log( ">>>" + msg );
			socket.emit( 'message', msg);
			data.length = 0;
		});

		socket.on( 'message', function( msg ) {
			var recieveData = JSON.parse(msg);
			if(recieveData['type'] == 'draw') {
				drawPos(ctx, recieveData);
			}
			else if(recieveData['type'] == 'clear') {
				clearCanvas(ctx, can);
				console.log("recieve clear command");
				data.length = 0;
			}
		});

		socket.on( 'message-init', function( msg ) {
			var i;
			var recieveData = JSON.parse(msg);
			clearCanvas(ctx, can);
			for (i=0; i<recieveData.length; i++) {
				drawPos(ctx, recieveData[i]);	
			}
		});
	});
</script>
